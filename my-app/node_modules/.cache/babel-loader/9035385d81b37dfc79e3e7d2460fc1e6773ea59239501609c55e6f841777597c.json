{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhave\\\\Desktop\\\\DBMS\\\\DBMS Project\\\\my-app\\\\src\\\\LoginPage.js\",\n  _s = $RefreshSig$();\n// // LoginPage.js\n\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// function LoginPage({ setRole }) {\n//     const [email, setEmail] = useState('');  // Email (if used in the future)\n//     const [password, setPassword] = useState('');  // Password field\n//     const [srn, setSrn] = useState('');  // For student SRN\n//     const [gId, setGId] = useState('');  // For teacher G_ID\n//     const [userRole, setUserRole] = useState('student');  // Default role is 'student'\n//     const navigate = useNavigate();\n\n//     const handleLogin = () => {\n//         // Perform validation based on role and password\n//         if (!password) {\n//             alert(\"Please enter your password.\");\n//             return;\n//         }\n\n//         if (userRole === 'student' && srn) {\n//             setRole('student');\n//             navigate('/student');\n//         } else if (userRole === 'teacher' && gId) {\n//             setRole('teacher');\n//             navigate('/teacher');\n//         } else {\n//             alert(\"Please enter the required details.\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>Login</h2>\n\n//             <label>\n//                 Select Role:\n//                 <select value={userRole} onChange={(e) => setUserRole(e.target.value)}>\n//                     <option value=\"student\">Student</option>\n//                     <option value=\"teacher\">Teacher</option>\n//                 </select>\n//             </label>\n//             <br />\n\n//             {userRole === 'student' ? (\n//                 <div>\n//                     <label>\n//                         SRN:\n//                         <input \n//                             type=\"text\" \n//                             value={srn} \n//                             onChange={(e) => setSrn(e.target.value)} \n//                             placeholder=\"Enter SRN\"\n//                         />\n//                     </label>\n//                     <br />\n//                 </div>\n//             ) : (\n//                 <div>\n//                     <label>\n//                         G_ID:\n//                         <input \n//                             type=\"text\" \n//                             value={gId} \n//                             onChange={(e) => setGId(e.target.value)} \n//                             placeholder=\"Enter G_ID\"\n//                         />\n//                     </label>\n//                     <br />\n//                 </div>\n//             )}\n\n//             <label>\n//                 Password:\n//                 <input \n//                     type=\"password\" \n//                     value={password} \n//                     onChange={(e) => setPassword(e.target.value)} \n//                     placeholder=\"Enter Password\"\n//                 />\n//             </label>\n//             <br />\n//             <button onClick={handleLogin}>Login</button>\n//             <button onClick={() => alert(\"Redirect to account creation page\")}>\n//                 Create Account\n//             </button>\n//         </div>\n//     );\n// }\n\n// export default LoginPage;\n\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// function LoginPage({ setRole }) {\n//     const [email, setEmail] = useState('');  // Email (if used in the future)\n//     const [password, setPassword] = useState('');  // Password field\n//     const [srn, setSrn] = useState('');  // For student SRN\n//     const [gId, setGId] = useState('');  // For teacher G_ID\n//     const [userRole, setUserRole] = useState('student');  // Default role is 'student'\n//     const navigate = useNavigate();\n\n//     const handleLogin = () => {\n//         // Perform validation based on role and password\n//         if (!password) {\n//             alert(\"Please enter your password.\");\n//             return;\n//         }\n\n//         if (userRole === 'student' && srn) {\n//             setRole('student');\n//             navigate('/student');\n//         } else if (userRole === 'teacher' && gId) {\n//             setRole('teacher');\n//             navigate('/teacher');\n//         } else {\n//             alert(\"Please enter the required details.\");\n//         }\n//     };\n\n//     const handleCreateAccount = () => {\n//         // Redirect to the account creation page\n//         navigate('/create-account');\n//     };\n\n//     return (\n//         <div>\n//             <h2>Login</h2>\n\n//             <label>\n//                 Select Role:\n//                 <select value={userRole} onChange={(e) => setUserRole(e.target.value)}>\n//                     <option value=\"student\">Student</option>\n//                     <option value=\"teacher\">Teacher</option>\n//                 </select>\n//             </label>\n//             <br />\n\n//             {userRole === 'student' ? (\n//                 <div>\n//                     <label>\n//                         SRN:\n//                         <input \n//                             type=\"text\" \n//                             value={srn} \n//                             onChange={(e) => setSrn(e.target.value)} \n//                             placeholder=\"Enter SRN\"\n//                         />\n//                     </label>\n//                     <br />\n//                 </div>\n//             ) : (\n//                 <div>\n//                     <label>\n//                         G_ID:\n//                         <input \n//                             type=\"text\" \n//                             value={gId} \n//                             onChange={(e) => setGId(e.target.value)} \n//                             placeholder=\"Enter G_ID\"\n//                         />\n//                     </label>\n//                     <br />\n//                 </div>\n//             )}\n\n//             <label>\n//                 Password:\n//                 <input \n//                     type=\"password\" \n//                     value={password} \n//                     onChange={(e) => setPassword(e.target.value)} \n//                     placeholder=\"Enter Password\"\n//                 />\n//             </label>\n//             <br />\n//             <button onClick={handleLogin}>Login</button>\n//             <button onClick={handleCreateAccount}>\n//                 Create Account\n//             </button>\n//         </div>\n//     );\n// }\n\n// export default LoginPage;\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Sample login data for testing (replace this with an API call or backend validation)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst loginData = {\n  student: [{\n    srn: 'S12345',\n    password: 'student123'\n  } // Example student login data\n  ],\n  teacher: [{\n    gId: 'T98765',\n    password: 'teacher123'\n  } // Example teacher login data\n  ]\n};\nfunction LoginPage({\n  setRole\n}) {\n  _s();\n  const [email, setEmail] = useState(''); // Email (if used in the future)\n  const [password, setPassword] = useState(''); // Password field\n  const [srn, setSrn] = useState(''); // For student SRN\n  const [gId, setGId] = useState(''); // For teacher G_ID\n  const [userRole, setUserRole] = useState('student'); // Default role is 'student'\n  const navigate = useNavigate();\n  const handleLogin = () => {\n    // Perform validation based on role and credentials\n    if (!password) {\n      alert(\"Please enter your password.\");\n      return;\n    }\n\n    // Check login data based on user role\n    let isValidLogin = false;\n    if (userRole === 'student') {\n      // Validate student login\n      const student = loginData.student.find(user => user.srn === srn && user.password === password);\n      if (student) {\n        setRole('student');\n        navigate('/student');\n        isValidLogin = true;\n      }\n    } else if (userRole === 'teacher') {\n      // Validate teacher login\n      const teacher = loginData.teacher.find(user => user.gId === gId && user.password === password);\n      if (teacher) {\n        setRole('teacher');\n        navigate('/teacher');\n        isValidLogin = true;\n      }\n    }\n    if (!isValidLogin) {\n      alert(\"Invalid login details. Please check your credentials.\");\n    }\n  };\n  const handleCreateAccount = () => {\n    // Redirect to the account creation page\n    navigate('/create-account');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Select Role:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: userRole,\n        onChange: e => setUserRole(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"student\",\n          children: \"Student\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"teacher\",\n          children: \"Teacher\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }, this), userRole === 'student' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"SRN:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: srn,\n          onChange: e => setSrn(e.target.value),\n          placeholder: \"Enter SRN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"G_ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: gId,\n          onChange: e => setGId(e.target.value),\n          placeholder: \"Enter G_ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        placeholder: \"Enter Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateAccount,\n      children: \"Create Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 9\n  }, this);\n}\n_s(LoginPage, \"X1gNs7HyIL26cwBeJYc9cCadUxg=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","loginData","student","srn","password","teacher","gId","LoginPage","setRole","_s","email","setEmail","setPassword","setSrn","setGId","userRole","setUserRole","navigate","handleLogin","alert","isValidLogin","find","user","handleCreateAccount","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","type","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/bhave/Desktop/DBMS/DBMS Project/my-app/src/LoginPage.js"],"sourcesContent":["// // LoginPage.js\r\n\r\n// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// function LoginPage({ setRole }) {\r\n//     const [email, setEmail] = useState('');  // Email (if used in the future)\r\n//     const [password, setPassword] = useState('');  // Password field\r\n//     const [srn, setSrn] = useState('');  // For student SRN\r\n//     const [gId, setGId] = useState('');  // For teacher G_ID\r\n//     const [userRole, setUserRole] = useState('student');  // Default role is 'student'\r\n//     const navigate = useNavigate();\r\n\r\n//     const handleLogin = () => {\r\n//         // Perform validation based on role and password\r\n//         if (!password) {\r\n//             alert(\"Please enter your password.\");\r\n//             return;\r\n//         }\r\n\r\n//         if (userRole === 'student' && srn) {\r\n//             setRole('student');\r\n//             navigate('/student');\r\n//         } else if (userRole === 'teacher' && gId) {\r\n//             setRole('teacher');\r\n//             navigate('/teacher');\r\n//         } else {\r\n//             alert(\"Please enter the required details.\");\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>Login</h2>\r\n\r\n//             <label>\r\n//                 Select Role:\r\n//                 <select value={userRole} onChange={(e) => setUserRole(e.target.value)}>\r\n//                     <option value=\"student\">Student</option>\r\n//                     <option value=\"teacher\">Teacher</option>\r\n//                 </select>\r\n//             </label>\r\n//             <br />\r\n\r\n//             {userRole === 'student' ? (\r\n//                 <div>\r\n//                     <label>\r\n//                         SRN:\r\n//                         <input \r\n//                             type=\"text\" \r\n//                             value={srn} \r\n//                             onChange={(e) => setSrn(e.target.value)} \r\n//                             placeholder=\"Enter SRN\"\r\n//                         />\r\n//                     </label>\r\n//                     <br />\r\n//                 </div>\r\n//             ) : (\r\n//                 <div>\r\n//                     <label>\r\n//                         G_ID:\r\n//                         <input \r\n//                             type=\"text\" \r\n//                             value={gId} \r\n//                             onChange={(e) => setGId(e.target.value)} \r\n//                             placeholder=\"Enter G_ID\"\r\n//                         />\r\n//                     </label>\r\n//                     <br />\r\n//                 </div>\r\n//             )}\r\n\r\n//             <label>\r\n//                 Password:\r\n//                 <input \r\n//                     type=\"password\" \r\n//                     value={password} \r\n//                     onChange={(e) => setPassword(e.target.value)} \r\n//                     placeholder=\"Enter Password\"\r\n//                 />\r\n//             </label>\r\n//             <br />\r\n//             <button onClick={handleLogin}>Login</button>\r\n//             <button onClick={() => alert(\"Redirect to account creation page\")}>\r\n//                 Create Account\r\n//             </button>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default LoginPage;\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// function LoginPage({ setRole }) {\r\n//     const [email, setEmail] = useState('');  // Email (if used in the future)\r\n//     const [password, setPassword] = useState('');  // Password field\r\n//     const [srn, setSrn] = useState('');  // For student SRN\r\n//     const [gId, setGId] = useState('');  // For teacher G_ID\r\n//     const [userRole, setUserRole] = useState('student');  // Default role is 'student'\r\n//     const navigate = useNavigate();\r\n\r\n//     const handleLogin = () => {\r\n//         // Perform validation based on role and password\r\n//         if (!password) {\r\n//             alert(\"Please enter your password.\");\r\n//             return;\r\n//         }\r\n\r\n//         if (userRole === 'student' && srn) {\r\n//             setRole('student');\r\n//             navigate('/student');\r\n//         } else if (userRole === 'teacher' && gId) {\r\n//             setRole('teacher');\r\n//             navigate('/teacher');\r\n//         } else {\r\n//             alert(\"Please enter the required details.\");\r\n//         }\r\n//     };\r\n\r\n//     const handleCreateAccount = () => {\r\n//         // Redirect to the account creation page\r\n//         navigate('/create-account');\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>Login</h2>\r\n\r\n//             <label>\r\n//                 Select Role:\r\n//                 <select value={userRole} onChange={(e) => setUserRole(e.target.value)}>\r\n//                     <option value=\"student\">Student</option>\r\n//                     <option value=\"teacher\">Teacher</option>\r\n//                 </select>\r\n//             </label>\r\n//             <br />\r\n\r\n//             {userRole === 'student' ? (\r\n//                 <div>\r\n//                     <label>\r\n//                         SRN:\r\n//                         <input \r\n//                             type=\"text\" \r\n//                             value={srn} \r\n//                             onChange={(e) => setSrn(e.target.value)} \r\n//                             placeholder=\"Enter SRN\"\r\n//                         />\r\n//                     </label>\r\n//                     <br />\r\n//                 </div>\r\n//             ) : (\r\n//                 <div>\r\n//                     <label>\r\n//                         G_ID:\r\n//                         <input \r\n//                             type=\"text\" \r\n//                             value={gId} \r\n//                             onChange={(e) => setGId(e.target.value)} \r\n//                             placeholder=\"Enter G_ID\"\r\n//                         />\r\n//                     </label>\r\n//                     <br />\r\n//                 </div>\r\n//             )}\r\n\r\n//             <label>\r\n//                 Password:\r\n//                 <input \r\n//                     type=\"password\" \r\n//                     value={password} \r\n//                     onChange={(e) => setPassword(e.target.value)} \r\n//                     placeholder=\"Enter Password\"\r\n//                 />\r\n//             </label>\r\n//             <br />\r\n//             <button onClick={handleLogin}>Login</button>\r\n//             <button onClick={handleCreateAccount}>\r\n//                 Create Account\r\n//             </button>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default LoginPage;\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Sample login data for testing (replace this with an API call or backend validation)\r\nconst loginData = {\r\n    student: [\r\n        { srn: 'S12345', password: 'student123' },  // Example student login data\r\n    ],\r\n    teacher: [\r\n        { gId: 'T98765', password: 'teacher123' },  // Example teacher login data\r\n    ],\r\n};\r\n\r\nfunction LoginPage({ setRole }) {\r\n    const [email, setEmail] = useState('');  // Email (if used in the future)\r\n    const [password, setPassword] = useState('');  // Password field\r\n    const [srn, setSrn] = useState('');  // For student SRN\r\n    const [gId, setGId] = useState('');  // For teacher G_ID\r\n    const [userRole, setUserRole] = useState('student');  // Default role is 'student'\r\n    const navigate = useNavigate();\r\n\r\n    const handleLogin = () => {\r\n        // Perform validation based on role and credentials\r\n        if (!password) {\r\n            alert(\"Please enter your password.\");\r\n            return;\r\n        }\r\n\r\n        // Check login data based on user role\r\n        let isValidLogin = false;\r\n\r\n        if (userRole === 'student') {\r\n            // Validate student login\r\n            const student = loginData.student.find(user => user.srn === srn && user.password === password);\r\n            if (student) {\r\n                setRole('student');\r\n                navigate('/student');\r\n                isValidLogin = true;\r\n            }\r\n        } else if (userRole === 'teacher') {\r\n            // Validate teacher login\r\n            const teacher = loginData.teacher.find(user => user.gId === gId && user.password === password);\r\n            if (teacher) {\r\n                setRole('teacher');\r\n                navigate('/teacher');\r\n                isValidLogin = true;\r\n            }\r\n        }\r\n\r\n        if (!isValidLogin) {\r\n            alert(\"Invalid login details. Please check your credentials.\");\r\n        }\r\n    };\r\n\r\n    const handleCreateAccount = () => {\r\n        // Redirect to the account creation page\r\n        navigate('/create-account');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Login</h2>\r\n\r\n            <label>\r\n                Select Role:\r\n                <select value={userRole} onChange={(e) => setUserRole(e.target.value)}>\r\n                    <option value=\"student\">Student</option>\r\n                    <option value=\"teacher\">Teacher</option>\r\n                </select>\r\n            </label>\r\n            <br />\r\n\r\n            {userRole === 'student' ? (\r\n                <div>\r\n                    <label>\r\n                        SRN:\r\n                        <input \r\n                            type=\"text\" \r\n                            value={srn} \r\n                            onChange={(e) => setSrn(e.target.value)} \r\n                            placeholder=\"Enter SRN\"\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <label>\r\n                        G_ID:\r\n                        <input \r\n                            type=\"text\" \r\n                            value={gId} \r\n                            onChange={(e) => setGId(e.target.value)} \r\n                            placeholder=\"Enter G_ID\"\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                </div>\r\n            )}\r\n\r\n            <label>\r\n                Password:\r\n                <input \r\n                    type=\"password\" \r\n                    value={password} \r\n                    onChange={(e) => setPassword(e.target.value)} \r\n                    placeholder=\"Enter Password\"\r\n                />\r\n            </label>\r\n            <br />\r\n            <button onClick={handleLogin}>Login</button>\r\n            <button onClick={handleCreateAccount}>\r\n                Create Account\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginPage;\r\n\r\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAG;EACdC,OAAO,EAAE,CACL;IAAEC,GAAG,EAAE,QAAQ;IAAEC,QAAQ,EAAE;EAAa,CAAC,CAAG;EAAA,CAC/C;EACDC,OAAO,EAAE,CACL;IAAEC,GAAG,EAAE,QAAQ;IAAEF,QAAQ,EAAE;EAAa,CAAC,CAAG;EAAA;AAEpD,CAAC;AAED,SAASG,SAASA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EAAAC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}