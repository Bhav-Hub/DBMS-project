{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhave\\\\Desktop\\\\DBMS\\\\DBMS Project\\\\my-app\\\\src\\\\LoginPage.js\",\n  _s = $RefreshSig$();\n// // LoginPage.js\n\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// function LoginPage({ setRole }) {\n//     const [email, setEmail] = useState('');  // Email (if used in the future)\n//     const [password, setPassword] = useState('');  // Password field\n//     const [srn, setSrn] = useState('');  // For student SRN\n//     const [gId, setGId] = useState('');  // For teacher G_ID\n//     const [userRole, setUserRole] = useState('student');  // Default role is 'student'\n//     const navigate = useNavigate();\n\n//     const handleLogin = () => {\n//         // Perform validation based on role and password\n//         if (!password) {\n//             alert(\"Please enter your password.\");\n//             return;\n//         }\n\n//         if (userRole === 'student' && srn) {\n//             setRole('student');\n//             navigate('/student');\n//         } else if (userRole === 'teacher' && gId) {\n//             setRole('teacher');\n//             navigate('/teacher');\n//         } else {\n//             alert(\"Please enter the required details.\");\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>Login</h2>\n\n//             <label>\n//                 Select Role:\n//                 <select value={userRole} onChange={(e) => setUserRole(e.target.value)}>\n//                     <option value=\"student\">Student</option>\n//                     <option value=\"teacher\">Teacher</option>\n//                 </select>\n//             </label>\n//             <br />\n\n//             {userRole === 'student' ? (\n//                 <div>\n//                     <label>\n//                         SRN:\n//                         <input \n//                             type=\"text\" \n//                             value={srn} \n//                             onChange={(e) => setSrn(e.target.value)} \n//                             placeholder=\"Enter SRN\"\n//                         />\n//                     </label>\n//                     <br />\n//                 </div>\n//             ) : (\n//                 <div>\n//                     <label>\n//                         G_ID:\n//                         <input \n//                             type=\"text\" \n//                             value={gId} \n//                             onChange={(e) => setGId(e.target.value)} \n//                             placeholder=\"Enter G_ID\"\n//                         />\n//                     </label>\n//                     <br />\n//                 </div>\n//             )}\n\n//             <label>\n//                 Password:\n//                 <input \n//                     type=\"password\" \n//                     value={password} \n//                     onChange={(e) => setPassword(e.target.value)} \n//                     placeholder=\"Enter Password\"\n//                 />\n//             </label>\n//             <br />\n//             <button onClick={handleLogin}>Login</button>\n//             <button onClick={() => alert(\"Redirect to account creation page\")}>\n//                 Create Account\n//             </button>\n//         </div>\n//     );\n// }\n\n// export default LoginPage;\n\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// function LoginPage({ setRole }) {\n//     const [email, setEmail] = useState('');  // Email (if used in the future)\n//     const [password, setPassword] = useState('');  // Password field\n//     const [srn, setSrn] = useState('');  // For student SRN\n//     const [gId, setGId] = useState('');  // For teacher G_ID\n//     const [userRole, setUserRole] = useState('student');  // Default role is 'student'\n//     const navigate = useNavigate();\n\n//     const handleLogin = () => {\n//         // Perform validation based on role and password\n//         if (!password) {\n//             alert(\"Please enter your password.\");\n//             return;\n//         }\n\n//         if (userRole === 'student' && srn) {\n//             setRole('student');\n//             navigate('/student');\n//         } else if (userRole === 'teacher' && gId) {\n//             setRole('teacher');\n//             navigate('/teacher');\n//         } else {\n//             alert(\"Please enter the required details.\");\n//         }\n//     };\n\n//     const handleCreateAccount = () => {\n//         // Redirect to the account creation page\n//         navigate('/create-account');\n//     };\n\n//     return (\n//         <div>\n//             <h2>Login</h2>\n\n//             <label>\n//                 Select Role:\n//                 <select value={userRole} onChange={(e) => setUserRole(e.target.value)}>\n//                     <option value=\"student\">Student</option>\n//                     <option value=\"teacher\">Teacher</option>\n//                 </select>\n//             </label>\n//             <br />\n\n//             {userRole === 'student' ? (\n//                 <div>\n//                     <label>\n//                         SRN:\n//                         <input \n//                             type=\"text\" \n//                             value={srn} \n//                             onChange={(e) => setSrn(e.target.value)} \n//                             placeholder=\"Enter SRN\"\n//                         />\n//                     </label>\n//                     <br />\n//                 </div>\n//             ) : (\n//                 <div>\n//                     <label>\n//                         G_ID:\n//                         <input \n//                             type=\"text\" \n//                             value={gId} \n//                             onChange={(e) => setGId(e.target.value)} \n//                             placeholder=\"Enter G_ID\"\n//                         />\n//                     </label>\n//                     <br />\n//                 </div>\n//             )}\n\n//             <label>\n//                 Password:\n//                 <input \n//                     type=\"password\" \n//                     value={password} \n//                     onChange={(e) => setPassword(e.target.value)} \n//                     placeholder=\"Enter Password\"\n//                 />\n//             </label>\n//             <br />\n//             <button onClick={handleLogin}>Login</button>\n//             <button onClick={handleCreateAccount}>\n//                 Create Account\n//             </button>\n//         </div>\n//     );\n// }\n\n// export default LoginPage;\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginPage({\n  setRole\n}) {\n  _s();\n  const [email, setEmail] = useState(''); // Email (if used in the future)\n  const [password, setPassword] = useState(''); // Password field\n  const [srn, setSrn] = useState(''); // For student SRN\n  const [gId, setGId] = useState(''); // For teacher G_ID\n  const [userRole, setUserRole] = useState('student'); // Default role is 'student'\n  const navigate = useNavigate();\n  const handleLogin = async () => {\n    // Validate input fields\n    if (!password) {\n      alert(\"Please enter your password.\");\n      return;\n    }\n\n    // Prepare the login data based on role\n    const loginData = {\n      email,\n      password,\n      role: userRole,\n      srn: userRole === 'student' ? srn : undefined,\n      gId: userRole === 'teacher' ? gId : undefined\n    };\n    try {\n      const response = await fetch('http://localhost:5000/handlelogin', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(loginData)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // If login is successful, set the role and navigate\n        setRole(userRole);\n        if (userRole === 'student') {\n          navigate('/student');\n        } else {\n          navigate('/teacher');\n        }\n      } else {\n        // Handle error messages\n        alert(data.message || 'Login failed');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert('There was an error processing your request.');\n    }\n  };\n  const handleCreateAccount = () => {\n    // Redirect to the account creation page\n    navigate('/create-account');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Select Role:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: userRole,\n        onChange: e => setUserRole(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"student\",\n          children: \"Student\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"teacher\",\n          children: \"Teacher\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), userRole === 'student' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"SRN:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: srn,\n          onChange: e => setSrn(e.target.value),\n          placeholder: \"Enter SRN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"G_ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: gId,\n          onChange: e => setGId(e.target.value),\n          placeholder: \"Enter G_ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        placeholder: \"Enter Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateAccount,\n      children: \"Create Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 9\n  }, this);\n}\n_s(LoginPage, \"X1gNs7HyIL26cwBeJYc9cCadUxg=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","LoginPage","setRole","_s","email","setEmail","password","setPassword","srn","setSrn","gId","setGId","userRole","setUserRole","navigate","handleLogin","alert","loginData","role","undefined","response","fetch","method","headers","body","JSON","stringify","data","json","ok","message","error","console","handleCreateAccount","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","type","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/bhave/Desktop/DBMS/DBMS Project/my-app/src/LoginPage.js"],"sourcesContent":["// // LoginPage.js\r\n\r\n// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// function LoginPage({ setRole }) {\r\n//     const [email, setEmail] = useState('');  // Email (if used in the future)\r\n//     const [password, setPassword] = useState('');  // Password field\r\n//     const [srn, setSrn] = useState('');  // For student SRN\r\n//     const [gId, setGId] = useState('');  // For teacher G_ID\r\n//     const [userRole, setUserRole] = useState('student');  // Default role is 'student'\r\n//     const navigate = useNavigate();\r\n\r\n//     const handleLogin = () => {\r\n//         // Perform validation based on role and password\r\n//         if (!password) {\r\n//             alert(\"Please enter your password.\");\r\n//             return;\r\n//         }\r\n\r\n//         if (userRole === 'student' && srn) {\r\n//             setRole('student');\r\n//             navigate('/student');\r\n//         } else if (userRole === 'teacher' && gId) {\r\n//             setRole('teacher');\r\n//             navigate('/teacher');\r\n//         } else {\r\n//             alert(\"Please enter the required details.\");\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>Login</h2>\r\n\r\n//             <label>\r\n//                 Select Role:\r\n//                 <select value={userRole} onChange={(e) => setUserRole(e.target.value)}>\r\n//                     <option value=\"student\">Student</option>\r\n//                     <option value=\"teacher\">Teacher</option>\r\n//                 </select>\r\n//             </label>\r\n//             <br />\r\n\r\n//             {userRole === 'student' ? (\r\n//                 <div>\r\n//                     <label>\r\n//                         SRN:\r\n//                         <input \r\n//                             type=\"text\" \r\n//                             value={srn} \r\n//                             onChange={(e) => setSrn(e.target.value)} \r\n//                             placeholder=\"Enter SRN\"\r\n//                         />\r\n//                     </label>\r\n//                     <br />\r\n//                 </div>\r\n//             ) : (\r\n//                 <div>\r\n//                     <label>\r\n//                         G_ID:\r\n//                         <input \r\n//                             type=\"text\" \r\n//                             value={gId} \r\n//                             onChange={(e) => setGId(e.target.value)} \r\n//                             placeholder=\"Enter G_ID\"\r\n//                         />\r\n//                     </label>\r\n//                     <br />\r\n//                 </div>\r\n//             )}\r\n\r\n//             <label>\r\n//                 Password:\r\n//                 <input \r\n//                     type=\"password\" \r\n//                     value={password} \r\n//                     onChange={(e) => setPassword(e.target.value)} \r\n//                     placeholder=\"Enter Password\"\r\n//                 />\r\n//             </label>\r\n//             <br />\r\n//             <button onClick={handleLogin}>Login</button>\r\n//             <button onClick={() => alert(\"Redirect to account creation page\")}>\r\n//                 Create Account\r\n//             </button>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default LoginPage;\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// function LoginPage({ setRole }) {\r\n//     const [email, setEmail] = useState('');  // Email (if used in the future)\r\n//     const [password, setPassword] = useState('');  // Password field\r\n//     const [srn, setSrn] = useState('');  // For student SRN\r\n//     const [gId, setGId] = useState('');  // For teacher G_ID\r\n//     const [userRole, setUserRole] = useState('student');  // Default role is 'student'\r\n//     const navigate = useNavigate();\r\n\r\n//     const handleLogin = () => {\r\n//         // Perform validation based on role and password\r\n//         if (!password) {\r\n//             alert(\"Please enter your password.\");\r\n//             return;\r\n//         }\r\n\r\n//         if (userRole === 'student' && srn) {\r\n//             setRole('student');\r\n//             navigate('/student');\r\n//         } else if (userRole === 'teacher' && gId) {\r\n//             setRole('teacher');\r\n//             navigate('/teacher');\r\n//         } else {\r\n//             alert(\"Please enter the required details.\");\r\n//         }\r\n//     };\r\n\r\n//     const handleCreateAccount = () => {\r\n//         // Redirect to the account creation page\r\n//         navigate('/create-account');\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>Login</h2>\r\n\r\n//             <label>\r\n//                 Select Role:\r\n//                 <select value={userRole} onChange={(e) => setUserRole(e.target.value)}>\r\n//                     <option value=\"student\">Student</option>\r\n//                     <option value=\"teacher\">Teacher</option>\r\n//                 </select>\r\n//             </label>\r\n//             <br />\r\n\r\n//             {userRole === 'student' ? (\r\n//                 <div>\r\n//                     <label>\r\n//                         SRN:\r\n//                         <input \r\n//                             type=\"text\" \r\n//                             value={srn} \r\n//                             onChange={(e) => setSrn(e.target.value)} \r\n//                             placeholder=\"Enter SRN\"\r\n//                         />\r\n//                     </label>\r\n//                     <br />\r\n//                 </div>\r\n//             ) : (\r\n//                 <div>\r\n//                     <label>\r\n//                         G_ID:\r\n//                         <input \r\n//                             type=\"text\" \r\n//                             value={gId} \r\n//                             onChange={(e) => setGId(e.target.value)} \r\n//                             placeholder=\"Enter G_ID\"\r\n//                         />\r\n//                     </label>\r\n//                     <br />\r\n//                 </div>\r\n//             )}\r\n\r\n//             <label>\r\n//                 Password:\r\n//                 <input \r\n//                     type=\"password\" \r\n//                     value={password} \r\n//                     onChange={(e) => setPassword(e.target.value)} \r\n//                     placeholder=\"Enter Password\"\r\n//                 />\r\n//             </label>\r\n//             <br />\r\n//             <button onClick={handleLogin}>Login</button>\r\n//             <button onClick={handleCreateAccount}>\r\n//                 Create Account\r\n//             </button>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default LoginPage;\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction LoginPage({ setRole }) {\r\n    const [email, setEmail] = useState('');  // Email (if used in the future)\r\n    const [password, setPassword] = useState('');  // Password field\r\n    const [srn, setSrn] = useState('');  // For student SRN\r\n    const [gId, setGId] = useState('');  // For teacher G_ID\r\n    const [userRole, setUserRole] = useState('student');  // Default role is 'student'\r\n    const navigate = useNavigate();\r\n\r\n    const handleLogin = async () => {\r\n        // Validate input fields\r\n        if (!password) {\r\n            alert(\"Please enter your password.\");\r\n            return;\r\n        }\r\n\r\n        // Prepare the login data based on role\r\n        const loginData = {\r\n            email,\r\n            password,\r\n            role: userRole,\r\n            srn: userRole === 'student' ? srn : undefined,\r\n            gId: userRole === 'teacher' ? gId : undefined\r\n        };\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:5000/handlelogin', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(loginData)\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                // If login is successful, set the role and navigate\r\n                setRole(userRole);\r\n                if (userRole === 'student') {\r\n                    navigate('/student');\r\n                } else {\r\n                    navigate('/teacher');\r\n                }\r\n            } else {\r\n                // Handle error messages\r\n                alert(data.message || 'Login failed');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            alert('There was an error processing your request.');\r\n        }\r\n    };\r\n\r\n    const handleCreateAccount = () => {\r\n        // Redirect to the account creation page\r\n        navigate('/create-account');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Login</h2>\r\n\r\n            <label>\r\n                Select Role:\r\n                <select value={userRole} onChange={(e) => setUserRole(e.target.value)}>\r\n                    <option value=\"student\">Student</option>\r\n                    <option value=\"teacher\">Teacher</option>\r\n                </select>\r\n            </label>\r\n            <br />\r\n\r\n            {userRole === 'student' ? (\r\n                <div>\r\n                    <label>\r\n                        SRN:\r\n                        <input \r\n                            type=\"text\" \r\n                            value={srn} \r\n                            onChange={(e) => setSrn(e.target.value)} \r\n                            placeholder=\"Enter SRN\"\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <label>\r\n                        G_ID:\r\n                        <input \r\n                            type=\"text\" \r\n                            value={gId} \r\n                            onChange={(e) => setGId(e.target.value)} \r\n                            placeholder=\"Enter G_ID\"\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                </div>\r\n            )}\r\n\r\n            <label>\r\n                Password:\r\n                <input \r\n                    type=\"password\" \r\n                    value={password} \r\n                    onChange={(e) => setPassword(e.target.value)} \r\n                    placeholder=\"Enter Password\"\r\n                />\r\n            </label>\r\n            <br />\r\n            <button onClick={handleLogin}>Login</button>\r\n            <button onClick={handleCreateAccount}>Create Account</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginPage;\r\n\r\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,SAASA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EACzC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EAC/C,MAAM,CAACW,GAAG,EAAEC,MAAM,CAAC,GAAGZ,QAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}